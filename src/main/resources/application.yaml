server:
  port: 8080

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/online_tutoring
    username: postgres
    password: postgres
    initialization-mode: always
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp:
          use_jdbc_metadata_defaults: false
    hibernate:
      ddl-auto: update
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 375574293332-rtkrggqk8fgn96vpcufcchfi9lnl59u4.apps.googleusercontent.com
            clientSecret: zj7n4Nu0wf-fUNKwFv_n4h2x
            redirectUri: "http://localhost:8080/oauth2/callback/google"
            scope:
              - email
              - profile
          facebook:
            clientId: 121189305185277
            clientSecret: 42ffe5aa7379e8326387e0fe16f34132
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
          github:
            clientId: d3e47fc2ddd966fa4352
            clientSecret: 3bc0f6b8332f93076354c2a5bada2f5a05aea60d
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
  flyway:
    out-of-order: true
    baseline-on-migrate: true
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
    time-zone: UTC

  # Redis specific configurations
  cache:
    type: redis
  redis:
    port: 6379
    host: localhost

  servlet:
    multipart:
      enabled: true # Enable multipart uploads
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 215MB

logging:
  level:
    org:
      hibernate:
        SQL: DEBUG

## RabbitMQ Properties
rabbit:
  relay:
    host: 127.0.0.1
    port: 5672
  client:
    login:  guest
    pass: guest
  queueName: spring-boot
  exchangeName: spring-boot-exchange
  routingKey: spring-boot.routingKey


app:
  ## File Storage Properties
  storage:
    location: ./uploads
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 36000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect